diff --git a/android/src/main/java/com/rnfs/Uploader.java b/android/src/main/java/com/rnfs/Uploader.java
index 5b2e594..cb0d35d 100644
--- a/android/src/main/java/com/rnfs/Uploader.java
+++ b/android/src/main/java/com/rnfs/Uploader.java
@@ -54,8 +54,10 @@ public class Uploader extends AsyncTask<UploadParams, int[], UploadResult> {
         String twoHyphens = "--";
         String boundary = "*****";
         String tail = crlf + twoHyphens + boundary + twoHyphens + crlf;
-        String metaData = "", stringData = "";
-        String[] fileHeader;
+        StringBuilder metaData = new StringBuilder();
+        byte[] metaDataBytes;
+        byte[][] fileHeader;
+        int stringData = 0;
         int statusCode, byteSentTotal;
         int fileCount = 0;
         long totalFileLength = 0;
@@ -84,10 +86,11 @@ public class Uploader extends AsyncTask<UploadParams, int[], UploadResult> {
             while (fieldsIterator.hasNextKey()) {
                 String key = fieldsIterator.nextKey();
                 String value = params.fields.getString(key);
-                metaData += twoHyphens + boundary + crlf + "Content-Disposition: form-data; name=\"" + key + "\"" + crlf + crlf + value +crlf;
+              metaData.append(twoHyphens).append(boundary).append(crlf).append("Content-Disposition: form-data; name=\"").append(key).append("\"").append(crlf).append(crlf).append(value).append(crlf);
             }
-            stringData += metaData;
-            fileHeader = new String[files.length];
+            metaDataBytes = metaData.toString().getBytes("UTF-8");
+            stringData += metaDataBytes.length;
+            fileHeader = new byte[files.length][];
             for (ReadableMap map : params.files) {
                 try {
                     name = map.getString("name");
@@ -111,8 +114,8 @@ public class Uploader extends AsyncTask<UploadParams, int[], UploadResult> {
                     }

                     String fileLengthHeader = "Content-length: " + fileLength + crlf;
-                    fileHeader[fileCount] = fileHeaderType + fileLengthHeader + crlf;
-                    stringData += fileHeaderType + fileLengthHeader + crlf;
+                    fileHeader[fileCount] = (fileHeaderType + fileLengthHeader + crlf).getBytes("UTF-8");
+                    stringData += fileHeader[fileCount].length;
                 }
                 fileCount++;
             }
@@ -122,7 +125,7 @@ public class Uploader extends AsyncTask<UploadParams, int[], UploadResult> {
             }
             if (!binaryStreamOnly) {
                 long requestLength = totalFileLength;
-                requestLength += stringData.length() + files.length * crlf.length();
+                requestLength += stringData + files.length * crlf.length();
                 connection.setRequestProperty("Content-length", "" +(int) requestLength);
                 connection.setFixedLengthStreamingMode((int)requestLength);
             }
@@ -131,15 +134,11 @@ public class Uploader extends AsyncTask<UploadParams, int[], UploadResult> {
             request = new DataOutputStream(connection.getOutputStream());
             WritableByteChannel requestChannel = Channels.newChannel(request);

-            if (!binaryStreamOnly) {
-                request.writeBytes(metaData);
-            }
-
             byteSentTotal = 0;

             for (ReadableMap map : params.files) {
                 if (!binaryStreamOnly) {
-                    request.writeBytes(fileHeader[fileCount]);
+                  request.write(fileHeader[fileCount]);
                 }

                 File file = new File(map.getString("filepath"));
@@ -168,7 +167,9 @@ public class Uploader extends AsyncTask<UploadParams, int[], UploadResult> {
                 fileCount++;
                 fileStream.close();
             }
-
+            if (!binaryStreamOnly) {
+                request.write(metaDataBytes);
+            }
             if (!binaryStreamOnly) {
                 request.writeBytes(tail);
             }
